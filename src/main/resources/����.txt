1.新建一个web 工程，添加maven支持
2.git init  添加.gitignore文件
3.创建hibernate环境:Person,Person.hbm.xml,hibernate.cfg.xml
4.spring配置：applicationContext.xml  sessionFactory配置，注解配置
        xmlns:context="http://www.springframework.org/schema/context"
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-2.5.xsd
        
	     <!--启动类及属性注解扫描  -->
        <context:component-scan base-package="com.oterman.oa"></context:component-scan>
	    
5.完成PersonDao PersonDaoImpl,PersonService,PersonServiceImpl，需要在PersonDaoImpl中引入HibernateTemplate
6.在applicationContext-db.xml中配置事务
	(1).基于XML配置：
			<bean name="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
			<property name="sessionFactory" ref="sessionFactory"></property>
		</bean>
		
		<tx:advice id="tx" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="save*" read-only="false"/>
				<tx:method name="update*" read-only="false"/>
				<tx:method name="*" read-only="true"/>
			</tx:attributes>
		</tx:advice>
		
		<aop:config>
			<aop:pointcut expression="execution(* com.oterman.oa.service.impl.PersonServiceImpl.*(..))" id="xx"/>
			<aop:advisor advice-ref="tx" pointcut-ref="xx"/>
		</aop:config>
		
	(2)基于注解配置：
	<!-- 声明使用注解来处理事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	在需要事务的方法上使用@Transactional注解
	
7.公共Dao，Service的抽取，见类图，然后测试
	各个类的组成
	  1、BaseDao
	        对crud的接口进行了抽象设计
	  2、BaseDaoImpl
	        对crud做一个公共的实现
	  3、PersonDao
	        是一个具体的dao
	  4、PersonDaoImpl
	        是一个具体的dao的实现
	  5、BaseService
	        对crud进行声明
	  6、BaseServiceImpl
	        调用baseDao,对BaseService进行crud的实现
	  7、PersonService
	  8、PersonServiceImpl
	  
	  在BaseDaoImpl中完成完成基本的crud操作，需要获取参数化类型的参数：ParameterizedType,obj.getGenericSuperClass,pt.getActul
	 ParameterizedType superClass=(ParameterizedType) this.getClass().getGenericSuperclass();//得到参数化的父类，即BaseDaoImpl<T>
	 this.entityClass=(Class) superClass.getActualTypeArguments()[0];//得到具体的具体的类型
	 
	 在BaseServiceImpl中完成基本的逻辑，但是完成逻辑需要传入baseDao的实现类的对象，这是在运行时候才能得到，
	 为此我们可以提供一个抽象方法获取运行时的baseDao的实现对象。然后利用baseDao的实现对象完成crud操作。
	 
8.Struts2配置文件;测试listPerson转到web-inf/jsp/person/list.jsp
	ServletActionContext.getContext.put("list",personList);
	在jsp页面中：
	<s:iterator value="#list">
		<tr>
			<td><s:property value="pid"/></td>	
			<td><s:property value="pname"/></td>	
			<td><s:property value="pgender"/></td>	
			<td><s:a action="personAction_update?id=%{pid}">修改</s:a></td>
		</tr>
	</s:iterator>
	
9.Department,User,Role类及hbm文件，部门和User一对多双边关联，user和role多对多,测试建表

10.DepartmentDao,DepartmentService,测试saveEntry(department)

11.DepartmentAction  showAllDepartments() 测试

12.完成department的前端list.jsp,update.jsp,add.jsp的显示
	list.jsp  查询数据库，存入map栈中， 在jsp页面迭代
	update  根据id查询，存入对象栈回显，提交到更新

13.用户模块，UserDao ,UserService,
	查询所有用户并显示出来：from User u left outer join fetch u.department left outer join fetch u.roles,list.jsp,迭代显示
	
14.用户模块：添加用户，addUI()  获取department和role，存入map栈中，然后在add.jsp显示
	add.jsp表单提交到add()方法，属性驱动和模型驱动相结合，did,rids
	userService：addUser(user,did,rids),完善user,为该方法添加事务
	
15.用户模块：修改用户，updateUI,获取department，获取roles集合，提取did,rids，赋值给action的属性，将user对象放入到对象栈中
			跳转到update.jsp，进行数据的回显
			删除用户，根据传入的id进行删除，hibernate会自动的维护关系。
			
16.权限模块: Privilege ,Role ,User ，给用户分配角色，给角色分配权限，用户和角色是多对多，角色和权限也是多对多，
		完善Role类，创建Privilege类，Privilege.hbm.xml，测试建表

17.zTree菜单树:自定义js事件：
	  <script>
	  	$().ready(function(){
			$(".content").unbind("俊哥好帅")
			$(".content").bind("俊哥好帅",function(event,obj){
				alert("这是自定义事件的内容"+obj.a+obj.b)
			})
			
			$(".content").unbind("click");
			$(".content").bind("click",function(){
				//触发事件
				$(this).trigger("俊哥好帅",{a:"haah",b:6})
			})
			
		})
		
	  </script>
  
18.MenuItem类代表一个菜单项，MenuItemDao,MenuItemService,向数据库中添加数据

19.Strtus2与ajax的整合，struts-json-plugin.jar包  



	

	